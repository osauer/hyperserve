package app

import (
	"fmt"
	"os"

	server "github.com/osauer/hyperserve/pkg/server"
	"golang.org/x/time/rate"
)

const version = "0.1.0"

// NewServer constructs a HyperServe instance configured with security-first defaults.
func NewServer(cfg Config) (*server.Server, error) {
	var opts []server.ServerOptionFunc

	if cfg.HealthAddr != "" {
		os.Setenv("HEALTH_ADDR", cfg.HealthAddr)
	}

	if cfg.LogLevel != "" {
		os.Setenv("HS_LOG_LEVEL", cfg.LogLevel)
	}

	opts = append(opts,
		server.WithAddr(cfg.Addr),
		server.WithHealthServer(),
		server.WithRateLimit(rate.Limit(cfg.RateLimit), cfg.RateBurst),
	)

	if cfg.EnableHardenedMode {
		opts = append(opts, server.WithHardenedMode())
	}

	if cfg.EnableMCP {
		opts = append(opts,
			server.WithMCPSupport(cfg.ServiceName, version),
			server.WithMCPBuiltinTools(true),
			server.WithMCPBuiltinResources(true),
		)
	}

	srv, err := server.NewServer(opts...)
	if err != nil {
		return nil, fmt.Errorf("create server: %w", err)
	}

	return srv, nil
}

// RegisterMiddleware applies opinionated middleware stacks for secure defaults.
func RegisterMiddleware(srv *server.Server) {
	srv.AddMiddleware("*", server.RequestLoggerMiddleware)
	srv.AddMiddlewareStack("/web", server.SecureWeb(srv.Options))
	srv.AddMiddleware("/api", server.RateLimitMiddleware(srv))
}
